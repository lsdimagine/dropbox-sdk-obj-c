namespace seen_state
    "Endpoints to access seen state data"

import team_common

alias PathOrSjidOrFileId = String(pattern="((\/|sjid:).*|nspath:[^:]*|id:.*)", min_length=1)

struct SeenStateUserArg
    "The arguments to the get_seen_state_users endpoint. Just takes a list of user_ids."

    user_ids List(String)
        "List of encoded user_ids."
    file_info FileInfo
        "The file that is currently being viewed."

struct BeaconInfo
    "Identifiers to uniquely identify a file and session for Beacon."

    auth_key String
    context String
    identifier String

struct BeaconInfoList
    "List of BeaconInfo objects that represent a list of files for Beacon."

    beacon_infos List(BeaconInfo, min_items=1)

struct FileInfo
    "Identifiers to uniquely identify a file. Either ns_id paired with
    sjid and ns_path is or sharing url is required."

    ns_id UInt64?
        "The ns_id of the file. Must be specified if the file_identifier corresponds to a ns_id or sjid."
    file_identifier PathOrSjidOrFileId?
        "Either the ns_path, sjid, or file_id of the file with a prefix to identify which."
    url String?
        "If viewing the file on a shared link or shared content link, the url to the file."

struct FileInfoList
    "List of FileInfo objects that represent a list of files."

    file_infos List(FileInfo, min_items=1)

struct SeenStateUser
    "Represents a user that has seen state and the information we need for rendering."

    user_id String
    display_name String
    email String?
    photo_circle_url String?
    sharing_access_type SharingAccessType?

struct SeenStateLastSeen
    "Seen State object consists of a timestamp of when the user last viewed as well as
    a SeenStateUser object holding user information. If when_last_seen is null, then it means
    that the user has not seen the object. Typically, this would happen only for
    the SeenStateLastSeen which corresponds to the actor themselves."

    when_last_seen UInt64?
    seen_state_user SeenStateUser

struct SeenStateInfo
    "Holds a list of seen states representing a list of views that unique users have on
    the object."

    seen_states List(SeenStateLastSeen)

struct SeenStateInfoResult
    "Seen state info appended with file info. We return a list of these in fetching seen
    state info.

    If integrating with sharing, we also return a user_info object which has sharing information
    as well.

    If the user does not have permission to see seen state, the seen_state_error field will be
    populated.
    "

    file_info FileInfo
    seen_state_info SeenStateInfo
    seen_state_error GetSeenStateInfoError?

union SharingAccessType
    "Possible levels of access that the user has when viewing the content. If the user has access of
    member_access, the user is either on the ACL directly or through a group (includes both
    explicit and inherited). If the user has access through a group, the group ids that the user has
    access through are specified through a list of group ids. If the user has link_only access, this
    means that the user is only able to view the file via a link.
    "

    member_access List(team_common.GroupId)
        "The user is explicitly on the ACL, either on the file or through inheritance from a parent
        namespace. Also includes a list of group ids that the user has access through."
    link_only
        "The user has access through a link only."

union SeenStateCoachmarkType
    "An enumeration of relevant coachmark types. Each entry in the union may also declare
    an associated datatype, but it must be optional. It should only be supplied on server
    return, iff there is additional data associated with that coachmark for the
    client to display."

    general
        "The coachmark generally explaining seen state; appears on the facepile."
    feedback
        "The coachmark prompting the user for product feedback."
    none
        "No coachmark should be shown to the user."

struct GetCoachmarkInfoArg
    file_info FileInfo?

struct CoachmarkInfo
    type_with_data SeenStateCoachmarkType?
        "The type of the seen state which the user requested, as well as any
        associated type-specific data. None if no coachmark should be shown to
        the user."

union CoachmarkInteraction
    accepted
        "User accepted the coachmark"
    dismissed
        "User dismissed the coachmark"

struct CoachmarkInteractionData
    type SeenStateCoachmarkType
    interaction CoachmarkInteraction
    file_info FileInfo?

struct OnboardingInteractionData
    owner_id String
        "The account id corresponding to the content owner"

union OnboardingEventType
    learn_more
        "User opened the help center article"
    open_file
        "User clicked through to the file"
    shown
        "The onboarding was shown"

struct OnboardingEventData
    event_type OnboardingEventType
        "The type of event that occurred"
    owner_id String
        "The account id of the owner of the content"
    should_not_show_again Boolean?
        "Whether or not the onboarding should be shown again"
    url String
        "The URL of the content"

struct PassStatusResult
    file_info FileInfo
    can_read_presence Boolean
    can_read_seen_state Boolean
    can_write_presence Boolean

union SeenStateError
    no_file
        "The file does not exist."
    no_permission
        "The user doesn't have permission to view this file."
    inconsistent_params
        "The shared link passed in doesn't match the file identifier params."

union GetSeenStateInfoError extends SeenStateError
    seen_state_disabled
        "The user has presence and members access to this file, but not to seen state.
        Should only be returned in the seen_state_error subfield of a SeenStateInfoResult"

route get_pass_status(FileInfoList, List(PassStatusResult), SeenStateError)
    "Called to determine what permissions a user has for PASS."

route get_seen_state_info(FileInfoList, List(SeenStateInfoResult), SeenStateError)
    "Get the seen state info for multiple files."

route get_seen_state_users(SeenStateUserArg, List(SeenStateUser), SeenStateError)
    "Gets extra seen state info for a set of users."

route update_timestamps_and_mark_offline(BeaconInfoList, Void, SeenStateError)
    "Updates the seen state timestamp of and marks the viewer as offline for the passed-in files."

route get_coachmark_info(GetCoachmarkInfoArg, CoachmarkInfo, SeenStateError)
    "Gets the coachmark that, based on current user state, the seen state frontend
    should show the user."

route log_coachmark_interaction(CoachmarkInteractionData, Void, SeenStateError)
    "Called when the user interacts with the seen state coachmark."

route update_pass_onboarding_status(OnboardingInteractionData, Void, SeenStateError)
    "Called when the user acknowledges the PASS privacy onboarding flow."

route log_onboarding_event(OnboardingEventData, Void, SeenStateError)
    "Called when an event related to PASS onboarding occurs."
