namespace account

import common

union Role
    "Role associated with an account."

    personal
        "Personal account unaffiliated with any team."
    business
        "Work account associated with a team."

struct AccessInfo
    "Access token details returned after logging in. Contains
    information for accessing other APIs as the authenticated user."

    @common.DefaultRedactor
    user_id Int64
        "Authenticated user's Dropbox user ID."

    @common.DefaultRedactor
    oauth2_access_token String
        "OAuth version 2 access token."

    example default
        user_id = 230170050
        oauth2_access_token = "2YotnFZFEjr1zCsicMWpAA"

struct DeviceInfo
    "Client device details."

    @common.DefaultRedactor
    device_id String?
        "Unique ID identifying the specific client device.
        Can be generated by client code."

    @common.DefaultRedactor
    device_name String?
        "User defined name for the device."

    carrier String?
        "Network carrier."

    client_locale String?
        "Locale of the client device."

    app_version String?
        "Installed version of app on client device."

    sys_model String?
        "Device hardware model."

    sys_version String?
        "Device operating system version."

    example default
        device_id = "68753A44-4D6F-1226-9C60-0050E4C00067"
        device_name = "Work iPhone"
        client_locale = "en_US"
        sys_model = "iPhone5,2"
        sys_version = "8.1"
        app_version = "2.0.3"
        carrier = "AT&T"

    example android
        device_id = "0a1080ce-751a-4643-b96f-5f24e7827c3a"
        client_locale = "ja_JP"
        sys_model = "SAMSUNG-SGH-I337"
        sys_version = "5.1"
        app_version = "3.0.0"
        carrier = "Verizon"

# Did not use subtyping here since the subclasses don't necessarily
# share any common fields.  Also it is more explicit for developers to
# recognized they need to handle different return types differently.

struct ReCaptchaRequest
    "Request for a Google reCAPTCHA response.  Clients should process
    the request and return a :type:`ReCaptchaResponse`."

    @common.DefaultRedactor
    public_key String
        "Base64 encoded reCAPTCHA public key used to encrypt response.
        This public key must be passed to reCAPTCHA servers when
        requesting the CAPTCHA."

    example default
        public_key = "bXfLVQeZ_ZT5UrQLEfDduYY3z7O8_W5d78Fb-jyuQGPknIgwn0uAVA=="

struct ReCaptchaResponse
    "reCAPTCHA response used to verify to the server the user is not
    a bot.  Sent by clients to the server after receiving a
    :type:`ReCaptchaRequest`."

    @common.DefaultRedactor
    challenge String
        "reCAPTCHA challenge identifier."

    @common.DefaultRedactor
    challenge_response String
        "reCAPTCHA challenge response."

    example default
        challenge = "03AHJ_VuthOfu9kECwfyJcQZUkwmxajqClU8irTNE4Hg4i90TIb..."
        challenge_response = "eyJyZXNwb25zZSI6IjMsNSw3In0."


#
# Route: login
#

route login_with_password (LoginArg, LoginResult, LoginError)
    "Get an account access token given a user's credentials.
    Meant for use by mobile apps.  Note that answering a CAPTCHA
    may be required for successful login.  Check result to
    verify whether login requires further requests."

    attrs
        auth = "app"

struct LoginArg
    @common.EmailRedactor
    email String
        "User's e-mail address."

    @common.DefaultRedactor
    password String
        "User's password."

    require_role Role?
        "Role user must have upon login."

    device_info DeviceInfo?
        "Detailed information about the client device."

    captcha ReCaptchaResponse?
        "CAPTCHA response if CAPTCHA was required."

    skybridge_output String?
        "Skybridge Output (for Client Intelligence)."

    example default
        email = "david@example.com"
        password = "asdfasdf"
        require_role = business
        device_info = default
        skybridge_output = "some-output-here"

    example captcha
        email = "sara@example.com"
        password = "p@ssw0rd"
        require_role = personal
        device_info = android
        captcha = default

union LoginResult

    success AccessInfo
        "login is complete and an access information is available."
    requires_captcha ReCaptchaRequest
        "login requires a response to CAPTCHA before proceeding.
        Process CAPTCHA and retry with CAPTCHA response."
    requires_two_factor TwoFactorAuthRequest
        "login requires 2-factor authentication.
        Complete login using 2FA."

    example default
        success = default

    example captcha
        requires_captcha = default

    example twofactor
        requires_two_factor = default

union LoginError

    credentials_expired
        "User's password has expired.
        An e-mail will be sent to the user with further instructions."
    credentials_invalid
        "Incorrect e-mail or password."
    login_rate_exceeded
        "Too many login attempts have been made.  Try again later."
    sms_error SmsError
        "Unable to send SMS to phone registered for two-factor
        authentication."
    two_factor_not_enabled
        "User's administrator requires two-factor authentication but the
        user does not have it enabled.  Two-factor authentication must be
        enabled through a web browser to login."
    role_mismatch
        "User does not the required role (e.g. business, personal) to
        complete request."

struct SmsError
    "Error sending an SMS to a mobile phone."

    @common.DefaultRedactor
    phone_suffix String
        "Last 2 digits of the mobile phone number."

    reason SmsErrorReason
        "Reason for SMS failure."

    example invalid
        phone_suffix = "6789"
        reason = number_invalid

    example carrier
        phone_suffix = "5432"
        reason = carrier_unsupported

union_closed SmsErrorReason
    "Reason an SMS error occurred (see :type:`SmsError`)."

    number_invalid
        "Mobile phone number is invalid.  This could indicate the
        number is malformed or is not registered to an SMS-enabled
        device."
    carrier_unsupported
        "Mobile phone number is registered with an unsupported network
        carrier."

struct TwoFactorAuthRequest
    "Result for :route:`login_with_password` if 2-factor
    authentication is enabled on the account.  Clients should continue
    the login process using :route:`two_factor/verify`."

    @common.DefaultRedactor
    checkpoint_token String
        "Temporary token used to track 2-factor authentication session."

    checkpoint_token_expires common.DropboxTimestamp
        "Expiration time of :field:`checkpoint_token`."

    delivery_mode TwoFactorDeliveryMode
        "Preferred form of receiving second factor of authentication."

    example default
        checkpoint_token = "eyJoIjogeyJiYXoiOiA0LCAiZm9vIjogMiwgImJhciI6IDN9fQ=="
        checkpoint_token_expires = "2015-08-07T18:56:15Z"
        delivery_mode = sms

union TwoFactorDeliveryMode
    "Method of delivering the second factor to the user."

    offline
        "Factor will be provided by an authenticator app, like Google Authenticator."

    @common.DefaultRedactor
    sms String
        "Factor will be provided through SMS (text).  Value is the last 2 digits of
        phone number that will receive the SMS."

    example default
        offline = null

    example sms
        sms = "4567"

#
# Route: two_factor/verify
#

route two_factor/verify(TwoFactorVerifyArg, AccessInfo, TwoFactorVerifyError)
    "Complete login and get an account access token given a user's
    two-factor authentication code (2FA response).  Meant for use by
    mobile apps after initiating login through
    :route:`login_with_password`."

    attrs
        auth = "app"

struct TwoFactorVerifyArg
    @common.DefaultRedactor
    checkpoint_token String
        "Temporary token used to track two-factor authentication session."

    @common.DefaultRedactor
    two_factor_code String
        "Second factor provided by user for authentication (e.g. SMS
        code, Google authenticator code)."

    device_info DeviceInfo?
        "Detailed information about the client device."

    example default
        checkpoint_token = "eyJoIjogeyJiYXoiOiA0LCAiZm9vIjogMiwgImJhciI6IDN9fQ=="
        two_factor_code = "253859"
        device_info = default

union TwoFactorVerifyError

    two_factor_code_invalid
        "The two-factor authentication code,
        :field:`TwoFactorVerifyArg.two_factor_code`, is invalid."
    checkpoint_token_invalid
        "Checkpoint token,
        :field:`TwoFactorVerifyArg.checkpoint_token`, is invalid.  The
        token may be malformed or may have expired. Attempt login
        again by calling :route:`login_with_password` to obtain a new
        checkpoint token."
    login_rate_exceeded
        "Too many login attempts have been made.  Try again later."

#
# Route: create_account
#

route create_account(CreateAccountArg, CreateAccountResult, CreateAccountError)
    "Create a new user account."

    attrs
        auth = "app"

struct CreateAccountArg
    email common.EmailAddress
        "Email address to use for new user."

    @common.DefaultRedactor
    password String(min_length=1)
        "Password to use for new user.  The server may impose stricter
         password requirements and return an error if they are not
         met."

    @common.DefaultRedactor
    first_name String(min_length=1)
        "User's first name.  The server may impose stricter
         requirements and return an error if they are not met."

    @common.DefaultRedactor
    last_name String(min_length=1)
        "User's last name.  The server may impose stricter
         requirements and return an error if they are not met."

    source String?
        "Name of source requesting account creation (e.g. android PDF
        viewer).  This field is determined automatically based on the
        client app ID, but can be overridden for a finer-grained
        source."

    captcha ReCaptchaResponse?
        "CAPTCHA response if CAPTCHA was required."

    skybridge_output String?
        "Skybridge Output (for Client Intelligence)."

    example default
        email = "bbitdiddle@dropbox.com"
        password = "p@ssw0rd!"
        first_name = "Ben"
        last_name = "Bitdiddle"

    example source
        email = "jsmith@example.com"
        password = "#itsa$ecret"
        first_name = "Jon"
        last_name = "Smith"
        source = "android_pdfviewer"

    example captcha
        email = "aphacker@dropbox.com"
        password = "heu%ghTlFch8nh#^RpEu"
        first_name = "Alyssa"
        last_name = "Hacker"
        captcha = default

union CreateAccountResult

    success AccessInfo
        "Account creation is complete and the newly created user has
        been logged in.  Access information is available."
    requires_captcha ReCaptchaRequest
        "Account creation requires a response to CAPTCHA before
        proceeding.  Process CAPTCHA and retry with CAPTCHA response."

    example default
        success = default

    example captcha
        requires_captcha = default

union CreateAccountError

    email_invalid EmailInvalidError
        "E-mail address is invalid.  See user error message for
        details."
    first_name_invalid
        "User's first name is invalid.  See user error message for
        details."
    last_name_invalid
        "User's last name are invalid.  See user error message for
        details."
    password_invalid
        "Password does not meet minimum criteria.  See user error
        message for details."

union EmailInvalidError
    already_taken
        "E-mail address is already taken."
    invalid
        "E-mail address is invalid."
