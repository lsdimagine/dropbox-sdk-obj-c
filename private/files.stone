namespace files

import async

route delete_with_changeset (DeleteArg, InternalFileOpResult, DeleteError)
    "An internal version of :route:`delete` that returns changeset data for
    undoing file operations."

struct InternalFileOpResult
    changesets List(Changeset)
    metadata Metadata

struct Changeset
    ns_id UInt64
        "The namespace that was affected by the change."
    changes List(UInt64)
        "IDs of the changes that map to our internal bookkeeping."

struct UploadSessionFinishBatchArg
    entries List(UploadSessionFinishArg, max_items=1000)
        "Each entry contains information of a single file."

    example default
        entries = [default]

struct UploadSessionFinishBatchResult
    entries List(UploadSessionFinishBatchResultEntry)
        "Each entry contains the result of the finish call.
        The order will be the same as input."

    example default
        entries = [default]

union UploadSessionFinishBatchResultEntry
    success FileMetadata
    failure UploadSessionFinishError

    example default
        success = default

union UploadSessionFinishBatchJobStatus extends async.PollResultBase
    complete UploadSessionFinishBatchResult
        "The upload_session/finish_batch has finished."

route upload_session/finish_batch (UploadSessionFinishBatchArg, async.LaunchEmptyResult, Void)
    "This route helps you commit many files at once into a user's Dropbox. Use
    :route:`upload_session/start` and :route:`upload_session/append` to upload
    file contents. We recommend uploading many files in parallel to increase
    throughput. Once the file contents have been uploaded, rather than calling
    :route:`upload_session/finish`, use this route to finish all your upload sessions
    in a single request.

    This route will return job_id immediately and do the async commit job in background.
    We have another route :route:`upload_session/check_finish_batch_job_status` to check the job
    status.

    For the same account, this route should be executed serially. That means you should not start
    next job before current job finishes. Also we only allow up to 1000 entries in a single request"

route upload_session/finish_batch/check(async.PollArg, UploadSessionFinishBatchJobStatus, async.PollError)
    "Returns the status of an asynchronous job for :route:`upload_session/finish_batch`. If
    success, it returns list of result for each entry"

route upload_session/check_finish_batch_job_status(async.PollArg, UploadSessionFinishBatchJobStatus, async.PollError) deprecated by upload_session/finish_batch/check
    "An alias of :route:`upload_session/finish_batch/check`"

route upload_session/finish_batch_sync (UploadSessionFinishBatchArg, UploadSessionFinishBatchResult, Void)
    "sync version of :route:`upload_session/finish_batch`"
