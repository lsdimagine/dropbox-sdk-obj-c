namespace files

import async
import users_common

#
# Patches
#

#
# Supported extensions
#

union PreviewType
    audio
        "Audio preview."
    file_tree
        "Archive preview."
    hls
        "HTTP Live Streaming preview."
    html
        "HTML preview."
    link_file
        "Link file (e.g. file representing web URL) preview."
    pdf
        "PDF preview."
    text
        "Text preview."
    thumbnail
        "Thumbnail preview."

    example default
        pdf = null

struct PreviewableExtensionInfo
    supported_preview_formats List(PreviewType)
        "The preview formats that are supported."
    full_content_preference List(PreviewType)
        "An ordered subset of supported extensions, used to determine client-side
        rendering behavior."

    example default
        supported_preview_formats = [default]
        full_content_preference = [default]

struct PreviewableExtensionsResult
    file_extension_to_previewable_info Map(String, PreviewableExtensionInfo)
        "Mapping from file extension to data that describes whether the extension
        is supported for previewing."

    example default
        file_extension_to_previewable_info = {"ai": default}

route get_previewable_extensions (Void, PreviewableExtensionsResult, Void)
    "Get supported file extensions for previewing."

    attrs
        owner = "api-platform"
        allow_app_folder_app = true

#
# Changesets
#

struct ChangesetData
    ns_id UInt64
        "The namespace that was affected by the changes. Should only
        be used by internal clients."
    changeset_id UInt64
        "ID of the change that maps to our internal bookkeeping.
        Should only be used by internal clients."

    example default
        ns_id = 1
        changeset_id = 2

patch struct FileOpsResult
    changeset_data List(ChangesetData)
        "A list of changeset data entries associated with a given file
        operation(s), used to undo the file operation(s). Sometimes, a valid
        file operation(s) cannot be undone, in which case, no :type:`ChangesetData`
        objects will be returned. This data should only be used by our internal clients."

    example default
        changeset_data = [default]

patch struct CreateFolderResult
    example default
        changeset_data = [default]

patch struct DeleteResult
    example default
        changeset_data = [default]

patch struct DeleteBatchResult
    example default
        changeset_data = [default]

patch struct RelocationResult
    example default
        changeset_data = [default]

patch struct RelocationBatchResult
    example default
        changeset_data = [default]

#
# Patches end
#

struct RollbackArg
    entries List(ChangesetData, min_items=1)
        "A list of changeset namespace data entries associated with a given file
        operation(s), used to undo the file operation(s)."

struct RollbackResult
    success Boolean
        "Whether the rollback was successful."

union RollbackError
    no_write_permission
        "Unable to rollback because user does not have the necessary write permissions."
    undo_operation_not_permitted
        "Unable to rollback because operation requires a namespace nest that is
        disallowed or unsupported."
    too_many_files
        "User is trying to undo an operation involving too many files."

route rollback_with_changesets (RollbackArg, RollbackResult, RollbackError)
    "Used to undo actions based on the supplied list of changesets."

struct Changeset
    ns_id UInt64
        "The namespace that was affected by the changes. Should only be used
        by out internal clients."
    changes List(UInt64)
        "IDs of the changes that map to our internal bookkeeping. Should only be
        used by our internal clients."

    example default
        ns_id = 1
        changes = [2]

struct InternalFileOpResult
    changesets List(Changeset)
    metadata Metadata

route delete_with_changeset (DeleteArg, InternalFileOpResult, DeleteError) deprecated by delete_v2
    "An internal version of :route:`delete` that returns changeset data for
    undoing file operations."

route upload_session/check_finish_batch_job_status(async.PollArg, UploadSessionFinishBatchJobStatus, async.PollError) deprecated by upload_session/finish_batch/check
    "An alias of :route:`upload_session/finish_batch/check`."

route upload_session/finish_batch_sync (UploadSessionFinishBatchArg, UploadSessionFinishBatchResult, Void)
    "sync version of :route:`upload_session/finish_batch`."

union UploadSessionFinishProcessedError extends UploadSessionFinishError
    processing_failed
        "Unable to apply the additional processing."

struct UploadSessionFinishProcessedArg extends UploadSessionFinishArg
    processing_type String?
        "The string that specifies the processing type."

    example ocr_pdf
        processing_type = "ocr_pdf"
        cursor = default
        commit = default

union_closed UploadSessionFinishProcessedResult
    success FileMetadata
        "File committed after the requested processing."
    failure UploadSessionFinishProcessedError
        "Unable to commit the file with the requested processing."

    example default
        success = default

union_closed UploadSessionFinishProcessedLaunch extends async.LaunchResultBase
    "Result returned by :route:`upload_session/finish_processed` that may either launch an
    asynchronous job or complete synchronously."

    complete UploadSessionFinishProcessedResult
        "The :route:`upload_session/finish_processed` has finished synchronously."

    example async_job_id
        async_job_id = "033a20f28cc4912e37756599f00782a4"

union_closed UploadSessionFinishProcessedJobStatus extends async.PollResultBase
    "Result returned by :route:`upload_session/finish_processed/check`."

    complete UploadSessionFinishProcessedResult
        "The :route:`upload_session/finish_processed` has finished asynchronously."

    example default
        complete = default

route upload_session/finish_processed (UploadSessionFinishProcessedArg, UploadSessionFinishProcessedLaunch, Void)
    "A variant of :route:`upload_session/finish` that performs additional mutation on the uploaded
    file asynchronously. The caller should check the status with
    :route:`upload_session/finish_processed/check`."

    attrs
        host = "content"
        style = "upload"
        is_preview = true

route upload_session/finish_processed/check(async.PollArg, UploadSessionFinishProcessedJobStatus, async.PollError)
    "Returns the status of an asynchronous job for :route:`upload_session/finish_processed`."

    attrs
        is_preview = true

route delete_batch_with_changeset_sync (DeleteBatchArg, InternalFileOpBatchResult, DeleteError) deprecated by delete_batch
    "This route helps you to delete multiple files/folders at once.

    Input should not contain duplicated/nested entries. If input contains
    both '/A' and '/A/B', this route won't be able to find '/A/B' after '/A'
    is deleted."

struct InternalFileOpBatchResult
    entries List(DeleteBatchResultEntry)
    changesets List(Changeset)

    example default
        entries = [default]
        changesets = [default]

route copy_batch_sync(RelocationBatchArg, RelocationBatchResult, RelocationBatchError)
    "Copy multiple files or folders to different locations at once in the
    user's Dropbox."

route move_batch_sync(RelocationBatchArg, RelocationBatchResult, RelocationBatchError)
    "Move multiple files or folders to different locations at once in the
    user's Dropbox."


#
# Browse folders routes
#
route tree_view_folders(InternalTreeViewFoldersArgs, InternalTreeViewFoldersResult, ListFolderError)
    "An internal version of browse_util/tree_view_folders AJAX endpoint."

struct InternalTreeViewFoldersArgs
    path PathR
        "The path to the folder you want to see the contents of."

    example default
        path = "/homework"

struct InternalTreeViewFoldersResult
    folders List(InternalTreeViewFoldersEntry)

    example default
        folders = [default]

struct InternalTreeViewFoldersEntry
    path PathR
        "The path of the sub folder."
    read_only Boolean
        "True when the folder is a read only folder."
    has_subdirs Boolean
        "True when the folder contains subfolders."
    is_shared Boolean = false
        "True when the folder is a shared folder."
    icon String
        "For web client, provides the icon file name for this folder."

    example default
        path = "/homework/math"
        read_only = false
        has_subdirs = true
        is_shared = false
        icon = "folder"
