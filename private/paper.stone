namespace paper
    "This namespace contains endpoints and data types for managing documents and folders in Dropbox Paper."

import sharing

struct PaperDocument
    doc_id String
        "Paper document id."

    example default
        doc_id = "uaSvRuxvnkFa12PTkBv5q"

union_closed DoucmentSubscriptionLevel
    "The subscription level of a Paper document"

    default
        "No change e-mails unless you're the creator."
    ignore
        "Ignored: Not shown in pad lists or activity and no email is sent"
    every
        "Subscribed: Shown in pad lists and activity and change e-mails are sent."
    no_email
        "Unsubscribed: Shown in pad lists, but not in activity and no change e-mails are sent"

union_closed FolderSubscriptionLevel
    "The subscription level of a Paper folder"

    none
        "Not shown in activity, no e-mails"
    activity_only
        "Shown in activity, no e-mails"
    daily_emails
        "Shown in activity, daily e-mails"
    weekly_emails
        "Shown in activity, weekly e-mails"

union_closed FolderSharingPolicyType
    "The sharing policy of a Paper folder.

    Note: The sharing policy of subfolders is inherited from the root folder."
    team
        "Everyone in your team and anyone directly invited can access this folder."
    invite_only
        "Only people directly invited can access this folder."

union_closed SharingTeamPolicyType
    "The sharing policy type of the Paper document."

    people_with_link_can_edit
        "Anyone who has a link to this document can edit this Paper document."
    people_with_link_can_view_and_comment
        "Anyone who has a link to this document can view and comment on this Paper document."
    invite_only
        "Only users that have been explicitly invited can access this Paper document."

union_closed SharingPublicPolicyType extends SharingTeamPolicyType
    disabled
        "Value used to indicate that document sharing is enabled only within team."

struct SharingPolicy
    "Sharing policy of Paper document."

    public_sharing_policy SharingPublicPolicyType?
        "This value applies to the non-team members."
    team_sharing_policy SharingTeamPolicyType?
        "This value applies to the team members only. The value is null for all personal accounts."

    example default
        public_sharing_policy = people_with_link_can_edit
        team_sharing_policy = people_with_link_can_edit

struct Folder
    "Data structure representing a Paper folder."

    id String
        "Paper folder id. This id uniquely identifies the folder."
    name String
        "Paper folder name."

    example default
        name = "Design docs"
        id = "e.gGYT6HSafpMej9bUv306oGm60vrHiCHgEFnzziioPGCvHf"

struct FoldersContainingPaperDocument
    "Metadata about Paper folders containing the specififed Paper doc."

    folder_sharing_policy_type FolderSharingPolicyType?
        "The sharing policy of the folder containing the Paper document."

    folders List(Folder)?
        "The folder path. If present the first folder is the root folder."

    example default
        folder_sharing_policy_type = team
        folders = [default]

struct PaperDocumentSharingPolicy extends PaperDocument
    sharing_policy SharingPolicy
        "The default sharing policy to be set for the Paper document."

    example default
        doc_id = "uaSvRuxvnkFa12PTkBv5q"
        sharing_policy = default


struct RemovePaperDocumentUser extends PaperDocument
    member sharing.MemberSelector
        "User which should be removed from the Paper document. Specify only email or Dropbox account id."

    example default
        doc_id = "uaSvRuxvnkFa12PTkBv5q"
        member = default

union PaperApiBaseError
    paper_disabled
        "Paper is Disabled."
    insufficient_permissions
        "Your account does not have permissions to perform this action."
    not_paper_user
        "The provided user has not used Paper yet."
    action_requires_doc_owner
        "The action you are trying to perform requires the user to be document owner."

union PaperApiNonCursorError extends PaperApiBaseError
    document_not_found
        "The required document was not found."
    invalid_arguments
        "Invalid arguments supplied."

union PaperApiCursorError extends PaperApiBaseError
    expired_cursor
        "The provided cursor is expired."
    invalid_cursor
        "The provided cursor is invalid."
    bad_cursor_arguments
        "The provided cursor contains invalid arguments."
    wrong_user_in_cursor
        "The provided cursor contains invalid user."

route docs/sharing_policy/get (PaperDocument, SharingPolicy, PaperApiNonCursorError)
    "Gets the default sharing policy for the given Paper document."
    attrs
        owner="paper-eng"

route docs/sharing_policy/set (PaperDocumentSharingPolicy, Void, PaperApiNonCursorError)
    "Sets the default sharing policy for the given Paper document. The default sharing policy can be changed only by teams.

    Note: 'public_sharing_policy' cannot be set to the value 'disabled' because this setting can be changed only by team admins."
    attrs
        owner="paper-eng"

route docs/delete (PaperDocument, Void, PaperApiNonCursorError)
    "Marks the given Paper document as deleted. This operation is non-destructive and the document can be revived by the owner.

    Note: This action can be performed only by the document owner."
    attrs
        owner="paper-eng"

route docs/permanently_delete (PaperDocument, Void, PaperApiNonCursorError)
    "Permanently deletes the given Paper document. This operation is final as the document cannot be recovered.

    Note: This action can be performed only by the document owner."
    attrs
        owner="paper-eng"

route docs/folder/get (PaperDocument, FoldersContainingPaperDocument, PaperApiNonCursorError)
    "Retrieves folder information for the given Paper document. This includes:
      - folder sharing policy type
      - full 'filepath', i.e. the list of folders (both folderId and folderName) from the root folder
        to the folder directly containing the Paper document

    Note: If the Paper document is not in any folder (aka unfiled) the response will be empty."
    attrs
        owner="paper-eng"

route docs/users/remove (RemovePaperDocumentUser, Void, PaperApiNonCursorError)
    "Allows an owner or editor to remove users from a Paper document using their email or Dropbox account id.

    Note: Document owner cannot be removed."
    attrs
        owner="paper-eng"
