namespace paper

union ImportFormat
    "The import format of the incoming data."

    html
        "The provided data is interpreted as standard HTML."
    markdown
        "The provided data is interpreted as markdown.

        Note: The first line of the provided document will be used as the doc title."
    plain_text
        "The provided data is interpreted as plain text.

        Note: The first line of the provided document will be used as the doc title."

route docs/create (PaperDocCreateArgs, PaperDocCreateUpdateResult, PaperDocCreateError)
    "Creates a new Paper doc with the provided content."
    attrs
        style="upload"
        owner="paper-eng"
        is_preview = true
        api_group="paper-api-alpha"

struct PaperDocCreateArgs
    parent_folder_id String?
        "The Paper folder ID where the Paper document should be created. The API user has to have
        write access to this folder or error is thrown."
    import_format ImportFormat
        "The format of provided data."

    example default
        "Create new Paper doc (unfiled)."
        import_format = markdown

    example createDocInFolder
        "Create new Paper doc inside Paper folder."
        import_format = html
        parent_folder_id = "e.gGYT6HSafpMej9bUv306GarglI7GGeAM3yvfZvXHO9u4mV"

struct PaperDocCreateUpdateResult
    doc_id String
        "Doc ID of the newly created doc."
    revision Int64
        "The Paper doc revision. Simply an ever increasing number."
    title String
        "The Paper doc title."

    example default
        doc_id = "uaSvRuxvnkFa12PTkBv5q"
        revision = 456736745
        title = "Week one retention"

union PaperDocCreateError extends PaperApiBaseError
    content_malformed
        "The provided content was malformed and cannot be imported to Paper."
    folder_not_found
        "The specified Paper folder is cannot be found."
    doc_length_exceeded
        "The newly created Paper doc would be too large.
        Please split the content into multiple docs."

route docs/update (PaperDocUpdateArgs, PaperDocCreateUpdateResult, PaperDocUpdateError)
    "Updates an existing Paper doc with the provided content."
    attrs
        style="upload"
        owner="paper-eng"
        is_preview = true
        api_group="paper-api-alpha"

union PaperDocUpdatePolicy
    append
        "The content will be appended to the doc."
    prepend
        "The content will be prepended to the doc.

        Note: the doc title will not be affected."
    overwrite_all
        "The document will be overwitten at the head with the provided content."

struct PaperDocUpdateArgs extends RefPaperDoc
    doc_update_policy PaperDocUpdatePolicy
        "The policy used for the current update call."
    revision Int64
        "The latest doc revision. This value must match the head revision or
        an error code will be returned. This is to prevent colliding writes."
    import_format ImportFormat
        "The format of provided data."

    example default
        "Overwrite the doc content with provided content."
        doc_update_policy = overwrite_all
        import_format = html
        doc_id = "uaSvRuxvnkFa12PTkBv5q"
        revision = 12345

    example prepend_example
        "Prepend the content into the doc (the doc title will remain unchanged)."
        doc_update_policy = prepend
        import_format = plain_text
        doc_id = "uaSvRuxvnkFa12PTkBv5q"
        revision = 56556

union PaperDocUpdateError extends DocLookupError
    content_malformed
        "The provided content was malformed and cannot be imported to Paper."
    revision_mismatch
        "The provided revision does not match the document head."
    doc_length_exceeded
        "The newly created Paper doc would be too large, split the content into multiple docs."

# --

route docs/get_metadata (RefPaperDoc, PaperDocGetMetadataResult, DocLookupError)
    "Returns Paper doc metadata."
    attrs
        owner = "paper-eng"
        is_preview = true
        api_group = "paper-api-alpha"

union PaperDocStatus
    active
        "The Paper doc is active."
    archived
        "The Paper doc is archived."

struct PaperDocGetMetadataResult
    doc_id PaperDocId
        "The Paper doc ID."
    owner String
        "The Paper doc owner's email address."
    title String
        "The Paper doc title."
    created_date common.DropboxTimestamp
        "The Paper doc creation date."
    status PaperDocStatus
        "The Paper doc status."
    revision Int64
        "The Paper doc revision. Simply an ever increasing number."
    last_updated_date common.DropboxTimestamp
        "The date when the Paper doc was last edited."
    last_editor String
        "The email address of the last editor of the Paper doc."

    example default
        doc_id = "uaSvRuxvnkFa12PTkBv5q"
        owner = "steph@example.com"
        title = "Onbaording Doc"
        created_date = "2016-01-20T00:00:00Z"
        status = active
        revision = 56556
        last_updated_date = "2017-01-02T00:00:00Z"
        last_editor = "stephen@example.com"

# --
