namespace security_settings

route send_verify_email (Void, Void, Void)
    "Send a verification email to the currently authenticated user."
    attrs
        owner = "prodsec"
        is_preview = true

struct SendVerifyPendingEmailArg
    unverified_new_email String
        "The pending email the user intends to switch to."

    example newEmail
        "Send an email to rohan+new@dropbox.com."
        unverified_new_email = "rohan+new@dropbox.com"

union SendVerifyPendingEmailError
    incorrect_email
        "The user is not authorized to send a verification email to the input email."

route send_verify_pending_email (SendVerifyPendingEmailArg, Void, SendVerifyPendingEmailError)
    "Send a verification email that verifies and changes user's email to the pending email."
    attrs
        owner = "prodsec"
        is_preview = true

struct WebSessionInfo
    browser_name String
    os_name String
    last_activity String
        "Last activity with hour ago granularity."
    location String
        "A canonicalized location, or 'Unknown Location' if none found."
    login_id String
        "The user session identifier."
    is_current Boolean
        "Whether this is the calling client's session."
    icon String
        "Short name for the sprite."

route get_active_web_sessions (Void, List(WebSessionInfo), Void)
    "Returns a list of active web sessions sorted by last activity, with current session if any first."
    attrs
        owner = "prodsec"
        is_preview = true

struct LogoutUserSessionArg
    remote_login_id String
        "The user session ID to invalidate."

    example logoutID
        remote_login_id = "1235123412341235"

route logout_user_session (LogoutUserSessionArg, Void, Void)
    "Logs out the user's remote session."
    attrs
        owner = "prodsec"
        is_preview = true

struct HostInfo
    display_name String
    id UInt64
    last_activity String
        "Last activity with hour ago granularity."
    last_activity_raw UInt64
        "The raw timestamp for last activity."
    location String
        "A canonicalized location, or 'Unknown Location' if none found."
    platform String
        "The machine's platform e.g. Windows."
    can_delete Boolean
        "Whether the user can remote wipe."
    icon String

route get_linked_hosts (Void, List(HostInfo), Void)
    "Returns a list of linked desktop clients sorted by last activity."
    attrs
        owner = "prodsec"
        is_preview = true

struct UnlinkHostArg
    host_id UInt64
    delete_data Boolean

    example unlinkHost
        host_id = 123512342134213412
        delete_data = false

union UnlinkHostError
    invalid_host_id_for_user
    already_unlinked

route unlink_host (UnlinkHostArg, Void, UnlinkHostError)
    "Unlink's a user's desktop client remotely."
    attrs
        owner = "prodsec"
        is_preview = true

struct MobileDeviceInfo
    app_id UInt64
        "The official app's ID."
    category String
        "The app category, e.g. iPhone."
    device_id String
        "A unique identifier for the device, or empty string if none exists."
    display_name String
        "The name of the device given."
    last_activity String
        "The last known activity from the device, with an hour granularity, or empty string if none exists."
    last_activity_raw UInt64
        "The raw timestamp for last activity."
    location String
        "A canonicalized location, or 'Unknown Location' if none found."
    icon String

route get_mobile_devices (Void, List(MobileDeviceInfo), Void)
    "Returns a list of linked mobile clients sorted by last activity."
    attrs
        owner = "prodsec"
        is_preview = true

struct UnlinkMobileDeviceArg
    device_id String
    app_id UInt64

    example unlinkMobileDevice
        device_id = "35124312341234"
        app_id = 31241234

route unlink_mobile_device (UnlinkMobileDeviceArg, Void, Void)
    "Unlinks a user's mobile device remotely."
    attrs
        owner = "prodsec"
        is_preview = true

struct AppInfo
    app_folder String
        "The folder the app is present in, empty string if none."
    app_name String
        "The name of the linked app."
    id UInt64
        "A unique identifier for the app."
    publisher String
        "The name of the app's publisher, or empty string if same as app name."
    publisher_url String
        "The URL of the app's publisher's page, or empty string if none exists."
    icon_url String
        "The URL of the app icon, or empty string if none exists."
    access_type_desc String
        "A description of what permissions this app has."

route get_linked_apps (Void, List(AppInfo), Void)
    "Returns a list of linked third party apps."
    attrs
        owner = "prodsec"
        is_preview = true

struct UninstallAppArg
    app_id UInt64
    keep_sandbox_files Boolean

    example uninstallApp
        app_id = 83264981762
        keep_sandbox_files = false

union UninstallAppError
    invalid_app
        "The app_id does not exist."
    team_linked_app
        "The app is a team linked app."

route uninstall_app (UninstallAppArg, Void, UninstallAppError)
    "Uninstalls a user's linked third party app remotely."
    attrs
        owner = "prodsec"
        is_preview = true

struct TwofactorInfo
    user_can_disable Boolean
        "Whether the user can disable two factor authentication."
    status String
        "Whether enabled and required by admin."
    primary String
        "The primary delivery method e.g. SMS or Authenticator app."
    primary_phone String?
        "The phone number, if phone SMS is the primary delivery method."
    backup String?
        "The backup phone number, or none if there's no backup."
    num_security_keys UInt64
        "The number of added security keys."

route get_twofactor_info (Void, TwofactorInfo?, Void)
    "Returns the twofactor info of the user, or null if the user has twofactor disabled."
    attrs
        owner = "prodsec"
        is_preview = true

route mark_sct_completed (Void, Void, Void)
    "Marks a user as having completed the Security Checkup Tool."
    attrs
        owner = "prodsec"
        is_preview = true
