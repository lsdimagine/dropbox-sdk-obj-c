namespace team

import common
import files
import sharing

# Common structs

union_closed DefaultSyncSetting
    sync
        "The folder will sync for members by default."
    no_sync
        "The folder will not be synced for members by default."

struct TeamFolderMetadataInternal extends TeamFolderMetadata
    "temporary extension needed to support sync management in admin console until full deprecation."

    default_sync_setting DefaultSyncSetting
        "Whether this folder syncs by default for members."

    example default
        name = "Marketing"
        team_folder_id = "123456789"
        status = active
        default_sync_setting = sync

#
# Internal versions of public routes - temporarily needed to support sync management
#

route team_folder/create_internal(TeamFolderCreateArgInternal, TeamFolderMetadataInternal, TeamFolderCreateError)
    "temporary variant required to support sync management in admin console until full deprecation."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderCreateArgInternal extends TeamFolderCreateArg
    default_sync_setting DefaultSyncSetting?
        "Whether this folder syncs by default."

    example default
        name = "Marketing"
        default_sync_setting = sync

route team_folder/list_internal(TeamFolderListArg, TeamFolderListResultInternal, TeamFolderListError)
    "temporary variant required to support sync management in admin console until full deprecation."
    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderListResultInternal
    "Result for :route:`team_folder/list_internal`."

    entries List(TeamFolderMetadataInternal)
        "List of all team folders in the authenticated team."

    example default
        entries = [default]

#
# Sync management routes
#

route team_folder/update_default_sync_setting(TeamFolderSyncSettingArg, TeamFolderMetadataInternal, TeamFolderSyncSettingError)
    "Changes the default sync setting for a team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderSyncSettingArg
    team_folder_id common.SharedFolderId
        "ID of the team folder."

    default_sync_setting DefaultSyncSetting
        "Whether this folder syncs by default for members."

    target_path String?
        "Relative path (name) to a direct subfolder of team_folder_id to set sync settings for."

    example default
        team_folder_id = "84528192421"
        default_sync_setting = sync

union TeamFolderSyncSettingError
    access_error TeamFolderAccessError
    empty_membership
        "Can't change default sync setting because parent folder has no active members."

route team_folder/update_all_default_sync_settings(TeamFolderAllSyncSettingsArg, Void, TeamFolderSyncSettingError)
    "Changes the default sync setting for all of the team's team folders."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderAllSyncSettingsArg
    default_sync_setting DefaultSyncSetting
        "Whether all current team folders should sync by default for members."

    example default
        default_sync_setting = sync

#
# Team folder metadata endpoints (private)
#

#
# Routes for alpha or unimplemented features
#

route team_folder/get_access_points(TeamFolderGetAccessPointsArg, TeamFolderAccessPoints, TeamFolderGetAccessPointsError)
    "Returns the access points of a member inside a team folder. A path to a folder
     can be specified to return only the access points contained in the folder's parents or
     subtree."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderGetAccessPointsArg extends TeamFolderIdArg
    path files.Path?
        "Fetches access point relevant to the folder at path. Path is relative to the team folder.
        The default path is the team folder."
    dropbox_id sharing.DropboxId
        "Dropbox account, team member, or group ID of member."

    example default
        path = "/folder"
        dropbox_id = "dbid:AAEufNrMPSPe0dMQijRP0N_aZtBJRm26W4Q"
        team_folder_id = "123456789"

struct TeamFolderAccessPoints
    access_points List(String)
        "A list of access point paths. The paths are relative to the team folder.

        Empty path refers to the team folder itself."

    example default
        access_points = ["", "/folder"]

union TeamFolderGetAccessPointsError
    access_error TeamFolderAccessError
    invalid_dropbox_id
        "The dropbox_id is malformed. Please provide a valid account or group id."

route team_folder/get_file_metadata(TeamFolderFileMetadataArg, TeamFolderFileMetadata, TeamFolderFileMetadataError)
    "Returns metadata for a folder or file in a team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderFileMetadataArg
    team_folder_id common.SharedFolderId
    path String = ""
        "Path to a file or folder in the team folder. Default is path to team folder."

    example default
        team_folder_id = "123456789"
        path = "/folder"

struct TeamFolderFileMetadata
    created common.DropboxTimestamp?
        "The date created of a file or folder in a team folder."

    example default
        created = "2016-08-05T15:50:38Z"

union TeamFolderFileMetadataError
    "There was an error accessing metadata for the team folder file or folder."

    path files.LookupError
    access_error TeamFolderAccessError

#
# Membership and Policy Management endpoints (unimplemented)
#

route team_folder/list_members(TeamFolderListMembersArg, sharing.SharedFolderMembers, TeamFolderListMembersError)
    "[NOT IMPLEMENTED] Returns the membership of the team folder."
    # TODO (#contentmanager): add pagination/continue

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderListMembersArg extends TeamFolderIdArg
    example default
        team_folder_id = "123456789"

union TeamFolderListMembersError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError

route team_folder/update_members(TeamFolderUpdateMembersArg, Void, TeamFolderUpdateMembersError)
    "[NOT IMPLEMENTED] Updates the membership of the team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderUpdateMembersArg extends TeamFolderIdArg
    add_members List(sharing.AddMember)
        "List of members to add to the folder."
    update_members List(sharing.AddMember)
        "List of members to update in the folder."
    remove_members List(sharing.MemberSelector)
        "List of members to remove from the folder."
    # TODO (#contentmanager): consider if we need quiet or message fields ?

    example default
        team_folder_id = "123456789"
        add_members = []
        update_members = []
        remove_members = []

union TeamFolderUpdateMembersError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    cant_share_outside_team
        "Your team policy does not allow sharing outside of the team."
    cant_add_user
        "You can only add groups to the root team folder."

route team_folder/update_policy(TeamFolderUpdatePolicyArg, TeamFolderMetadata, TeamFolderUpdatePolicyError)
    "[NOT IMPLEMENTED] Updates the policy of the team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderUpdatePolicyArg extends TeamFolderIdArg
    member_policy sharing.MemberPolicy
        "Policy governing who can be a member of the team folder."
    acl_update_policy sharing.AclUpdatePolicy
        "Policy governing who can change the team folder's access control list."
    shared_link_policy sharing.SharedLinkPolicy
        "Policy governing who can view shared links."
    # TODO (#contentmanager): future extension: path files.Path

    example default
        team_folder_id = "123456789"
        member_policy = team
        acl_update_policy = owner
        shared_link_policy = members

union TeamFolderUpdatePolicyError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    team_policy_disallows_member_policy
        "Team policy is more restrictive than :field:`TeamFolderUpdatePolicyArg.member_policy`."

#
# Metadata
#
