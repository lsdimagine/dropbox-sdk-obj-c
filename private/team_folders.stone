namespace team

import async
import common
import sharing
import team_policies

#
# Team folder list members
#

route team_folder/list_members(TeamFolderListMembersArg, sharing.SharedFolderMembers, TeamFolderListMembersError)
    "[NOT IMPLEMENTED] Returns the membership of the team folder."
    # TODO (#contentmanager): add pagination/continue

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderListMembersArg extends TeamFolderIdArg
    example default
        team_folder_id = "123456789"

union TeamFolderListMembersError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    other*

#
# Team folder update managed sync setting
#

route team_folder/update_default_sync_setting(TeamFolderSyncSettingArg, TeamFolderMetadata, TeamFolderSyncSettingError)
    "Changes the default sync setting for a team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderSyncSettingArg
    team_folder_id common.SharedFolderId
        "ID of the team folder."

    default_sync_setting DefaultSyncSetting
        "Whether this folder syncs by default for members."

    target_path String?
        "Relative path (name) to a direct subfolder of team_folder_id to set sync settings for."

    example default
        team_folder_id = "84528192421"
        default_sync_setting = sync

union TeamFolderSyncSettingError
    access_error TeamFolderAccessError
    empty_membership
        "Can't change default sync setting because parent folder has no active members"
    other*

#
# Team folder update all managed sync settings
#

route team_folder/update_all_default_sync_settings(TeamFolderAllSyncSettingsArg, Void, TeamFolderSyncSettingError)
    "Changes the default sync setting for all of the team's team folders."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderAllSyncSettingsArg
    default_sync_setting DefaultSyncSetting
        "Whether all current team folders should sync by default for members."

    example default
        default_sync_setting = sync

#
# Team folder update members
#

route team_folder/update_members(TeamFolderUpdateMembersArg, Void, TeamFolderUpdateMembersError)
    "[NOT IMPLEMENTED] Updates the membership of the team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderUpdateMembersArg extends TeamFolderIdArg
    add_members List(sharing.AddMember)
        "List of members to add to the folder"
    update_members List(sharing.AddMember)
        "List of members to update in the folder"
    remove_members List(sharing.MemberSelector)
        "List of members to remove from the folder"
    # TODO (#contentmanager): consider if we need quiet or message fields ?

    example default
        team_folder_id = "123456789"
        add_members = []
        update_members = []
        remove_members = []

union TeamFolderUpdateMembersError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    cant_share_outside_team
        "Your team policy does not allow sharing outside of the team."
    cant_add_user
        "You can only add groups to the root team folder."
    other*

#
# Team folder update policy
#

route team_folder/update_policy(TeamFolderUpdatePolicyArg, TeamFolderMetadata, TeamFolderUpdatePolicyError)
    "[NOT IMPLEMENTED] Updates the policy of the team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderUpdatePolicyArg extends TeamFolderIdArg
    member_policy sharing.MemberPolicy
        "Policy governing who can be a member of the team folder"
    acl_update_policy sharing.AclUpdatePolicy
        "Policy governing who can change the team folder's access control list"
    shared_link_policy sharing.SharedLinkPolicy
        "Policy governing who can view shared links"
    # TODO (#contentmanager): future extension: path files.Path

    example default
        team_folder_id = "123456789"
        member_policy = team
        acl_update_policy = owner
        shared_link_policy = members

union TeamFolderUpdatePolicyError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    team_policy_disallows_member_policy
        "Team policy is more restrictive than :field:`TeamFolderUpdatePolicyArg.member_policy`."
    other*

#
# Team folder permanently delete
#

route team_folder/permanently_delete(TeamFolderIdArg, Void, TeamFolderPermanentlyDeleteError)
    "[NOT IMPLEMENTED] Permanently deletes an archived folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

union TeamFolderPermanentlyDeleteError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    other*
