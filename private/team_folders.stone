namespace team

import async
import common
import sharing
import team_policies

# Common structs

union TeamFolderStatus
    active
        "The team folder is available in all members' Dropboxes"
    archived
        "The team folder is archived and not accessible"
    other*

struct TeamFolderIdArg
    team_folder_id common.SharedFolderId
        "The ID of the team folder"

    example default
        team_folder_id = "123456789"

struct TeamFolderMetadata
    "Properties of a team folder"
    team_folder_id common.SharedFolderId
        "The ID of the team folder"

    name String
        "The name of the team folder"

    status TeamFolderStatus
        "The status of the team folder"

    default_sync_setting DefaultSyncSetting
        "Whether this folder syncs by default for members."

    example default
        name = "Marketing"
        team_folder_id = "123456789"
        status = active
        default_sync_setting = sync

union TeamFolderAccessError
    invalid_team_folder_id
        "The team folder ID is invalid"
    no_access
        "The authenticated app does not have permission to manage that team folder"
    other*

union DefaultSyncSetting
    sync
        "The folder will sync for members by default."
    no_sync
        "The folder will not be synced for members by default."

union TeamFolderInvalidStatusError
    active
        "The folder is active and the operation did not succeed."
    archived
        "The folder is archived and the operation did not succeed."
    other*

#
# Team folder create
#

route team_folder/create(TeamFolderCreateArg, TeamFolderMetadata, TeamFolderCreateError)
    "Creates a new team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderCreateArg
    name String
        "New team folder name"
    default_sync_setting DefaultSyncSetting?
        "Whether this folder syncs by default"

    example default
        name = "Marketing"
        default_sync_setting = sync

union TeamFolderCreateError
    invalid_folder_name
        "The provided folder name cannot be used."
    folder_name_already_used
        "There is already a team folder with the same name."
    other*

#
# Team folder rename
#

route team_folder/rename(TeamFolderRenameArg, TeamFolderMetadata, TeamFolderRenameError)
    "Changes an existing team folder's name."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderRenameArg extends TeamFolderIdArg
    name String
        "New team folder name."

    example default
        team_folder_id = "123456789"
        name = "Sales"

union TeamFolderRenameError
    access_error TeamFolderAccessError
    invalid_folder_name
        "The provided folder name cannot be used"
    folder_name_already_used
        "There is already an active team folder with the same name"
    other*

#
# Team folder list
#

route team_folder/list(TeamFolderListArg, TeamFolderListResult, TeamFolderListError)
    "Lists all team folders in the authenticated team."
    # TODO (#contentmanager): add pagination
    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderListArg
    limit UInt32(min_value=1, max_value=1000) = 1000
        "The maximum number of results to return per request."

    example default
        limit = 100

struct TeamFolderListResult
    "Result for :route:`team_folder/list`"

    entries List(TeamFolderMetadata)
        "List of all team folders in the authenticated team"

    example default
        entries = [default]

struct TeamFolderListError
    access_error TeamFolderAccessError

#
# Team folder get info
#

route team_folder/get_info(TeamFolderIdArg, TeamFolderMetadata, TeamFolderGetInfoError)
    "[NOT IMPLEMENTED] Returns the team folder's metadata."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

union TeamFolderGetInfoError
    access_error TeamFolderAccessError
    other*

#
# Team folder list members
#

route team_folder/list_members(TeamFolderListMembersArg, sharing.SharedFolderMembers, TeamFolderListMembersError)
    "[NOT IMPLEMENTED] Returns the membership of the team folder."
    # TODO (#contentmanager): add pagination/continue

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderListMembersArg extends TeamFolderIdArg
    example default
        team_folder_id = "123456789"

union TeamFolderListMembersError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    other*

#
# Team folder update managed sync setting
#

route team_folder/update_default_sync_setting(TeamFolderSyncSettingArg, TeamFolderMetadata, TeamFolderSyncSettingError)
    "Changes the default sync setting for a team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderSyncSettingArg
    team_folder_id common.SharedFolderId
        "ID of the team folder."

    default_sync_setting DefaultSyncSetting
        "Whether this folder syncs by default for members."

    target_path String?
        "Relative path (name) to a direct subfolder of team_folder_id to set sync settings for."

    example default
        team_folder_id = "84528192421"
        default_sync_setting = sync

union TeamFolderSyncSettingError
    access_error TeamFolderAccessError
    empty_membership
        "Can't change default sync setting because parent folder has no active members"
    other*

#
# Team folder update all managed sync settings
#

route team_folder/update_all_default_sync_settings(TeamFolderAllSyncSettingsArg, Void, TeamFolderSyncSettingError)
    "Changes the default sync setting for all of the team's team folders."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderAllSyncSettingsArg
    default_sync_setting DefaultSyncSetting
        "Whether all current team folders should sync by default for members."

    example default
        default_sync_setting = sync

#
# Team folder update members
#

route team_folder/update_members(TeamFolderUpdateMembersArg, Void, TeamFolderUpdateMembersError)
    "[NOT IMPLEMENTED] Updates the membership of the team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderUpdateMembersArg extends TeamFolderIdArg
    add_members List(sharing.AddMember)
        "List of members to add to the folder"
    update_members List(sharing.AddMember)
        "List of members to update in the folder"
    remove_members List(sharing.MemberSelector)
        "List of members to remove from the folder"
    # TODO (#contentmanager): consider if we need quiet or message fields ?

    example default
        team_folder_id = "123456789"
        add_members = []
        update_members = []
        remove_members = []

union TeamFolderUpdateMembersError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    cant_share_outside_team
        "Your team policy does not allow sharing outside of the team."
    cant_add_user
        "You can only add groups to the root team folder."
    other*

#
# Team folder update policy
#

route team_folder/update_policy(TeamFolderUpdatePolicyArg, TeamFolderMetadata, TeamFolderUpdatePolicyError)
    "[NOT IMPLEMENTED] Updates the policy of the team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderUpdatePolicyArg extends TeamFolderIdArg
    member_policy sharing.MemberPolicy
        "Policy governing who can be a member of the team folder"
    acl_update_policy sharing.AclUpdatePolicy
        "Policy governing who can change the team folder's access control list"
    shared_link_policy sharing.SharedLinkPolicy
        "Policy governing who can view shared links"
    # TODO (#contentmanager): future extension: path files.Path

    example default
        team_folder_id = "123456789"
        member_policy = team
        acl_update_policy = owner
        shared_link_policy = members

union TeamFolderUpdatePolicyError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    team_policy_disallows_member_policy
        "Team policy is more restrictive than :field:`TeamFolderUpdatePolicyArg.member_policy`."
    other*

#
# Team folder activate
#

route team_folder/activate(TeamFolderIdArg, TeamFolderMetadata, TeamFolderActivateError)
    "Sets the team folder status to active."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

union TeamFolderActivateError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    other*

#
# Team folder archive
#

route team_folder/archive(TeamFolderArchiveArg, TeamFolderArchiveLaunch, TeamFolderArchiveError)
    "Removes all folder and file members and sets the team folder status to archived."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

struct TeamFolderArchiveArg extends TeamFolderIdArg
    force_async_off Boolean = false
        "Whether to force the archive to happen synchronously.

        TODO(shuehan): Remove this param once the UI handles async"

    example default
        team_folder_id = "123456789"
        force_async_off = false

union TeamFolderArchiveLaunch extends async.LaunchResultBase
    complete TeamFolderMetadata

    example default
        complete = default

union TeamFolderArchiveError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    other*

route team_folder/archive/check(async.PollArg, TeamFolderArchiveJobStatus, async.PollError)
    "Returns the status of an asynchronous job for archiving a team folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

union TeamFolderArchiveJobStatus extends async.PollResultBase
    complete TeamFolderMetadata
        "The archive job has finished. The value is the metadata for the resulting team folder."
    failed TeamFolderArchiveError
        "Error occurred while performing an asynchronous job from :route:`team_folder/archive`."

    example default
        complete = default


#
# Team folder permanently delete
#

route team_folder/permanently_delete(TeamFolderIdArg, Void, TeamFolderPermanentlyDeleteError)
    "[NOT IMPLEMENTED] Permanently deletes an archived folder."

    attrs
        owner = "company-dropbox-team"
        auth = "team"

union TeamFolderPermanentlyDeleteError
    access_error TeamFolderAccessError
    status_error TeamFolderInvalidStatusError
    other*
