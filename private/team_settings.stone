namespace team

import team_administration
import async

alias AdministrationError = team_administration.AdministrationError

#
# Set team's permanent delete policy
#

struct PermanentDeletePolicy
    permanent_delete_enabled Boolean

    example permanent_delete_enabled
        permanent_delete_enabled = true

alias SetPermanentDeletePolicyArg = PermanentDeletePolicy

route set_permanent_delete_policy(SetPermanentDeletePolicyArg, Void, AdministrationError)

    attrs
        auth="team"
        owner="adminx"

#
# Multiple accounts
#


struct MultipleAccountsPolicy
    multiple_accounts_enabled Boolean

    example multiple_accounts_enabled
        multiple_accounts_enabled = true

alias MultipleAccountsPolicyArg = MultipleAccountsPolicy

route set_multiple_accounts_policy(MultipleAccountsPolicyArg, Void, AdministrationError)

    attrs
        auth="team"
        owner="adminx"

#
# Reset all passwords
#

route reset_all_passwords(Void, async.LaunchEmptyResult, AdministrationError)
    "Reset all passwords. All team members will need to reset their passwords.

    Permission : Team member management"

    attrs
        auth="team"
        owner="adminx"

#
# Getting the status of a reset all passwords job
#

union_closed ResetAllPasswordsJobStatus extends async.PollResultBase
    complete async.LaunchEmptyResult
        "The asynchronous job has finished."

route reset_all_passwords/job_status/check(async.PollArg, ResetAllPasswordsJobStatus, async.PollError)
    "Once an async_job_id is returned from :route:`reset_all_passwords` ,
    use this to poll the status of the asynchronous request.

    Permission : Team member management"

    attrs
        auth = "team"
        owner = "adminx"

#
# Set request membership policy.
#

union_closed RequestMembership
    require_approval
        "Asking to join."
    auto_accept
        "Automatic joining."
    disabled
        "Joining by invite only."

struct RequestMembershipPolicy
    request_membership RequestMembership

    example default
        request_membership = auto_accept

alias RequestMembershipPolicyArg = RequestMembershipPolicy

union_closed RequestMembershipPolicyError extends team_administration.AdministrationError
    feature_not_available String
        "This feature is not available for your team."

    example default
        feature_not_available = "The feature is not available for your team."

route set_request_membership_policy(RequestMembershipPolicyArg, Void, RequestMembershipPolicyError)
    "Determine how coworkers can join the team.
    Only coworkers with a verified company email address can find or join your team.


    Permission : Team member management"

    attrs
        auth="team"
        owner="adminx"

#
# Set suggest members policy.
#

struct SuggestMembersPolicy
    suggest_members_enabled Boolean

    example suggest_members_enabled
        suggest_members_enabled = true

alias SuggestMembersPolicyArg = SuggestMembersPolicy

route set_suggest_members_policy(SuggestMembersPolicyArg, Void, AdministrationError)
    "Allow team members to suggest other coworkers to add to the team.
    Admins can accept or dismiss suggestions.

    Permission : Team member management"

    attrs
        auth="team"
        owner="adminx"


#
# Team default initial sync setting for team folders
#

route set_team_folder_initial_sync_setting(SetTeamFolderInitialSyncSettingArg, Void, AdministrationError)

    attrs
        auth="team"
        owner="adminx"

struct SetTeamFolderInitialSyncSettingArg
    initial_sync_setting DefaultSyncSetting
        "Whether new team folders should sync by default for members."

    example default
        initial_sync_setting = sync

#
# Team default initial sync setting for shared folders
#

route set_shared_folder_initial_sync_setting(SetSharedFolderInitialSyncSettingArg, Void, AdministrationError)

    attrs
        auth="team"
        owner="adminx"

struct SetSharedFolderInitialSyncSettingArg
    initial_sync_setting DefaultSyncSetting
        "Whether new shared folders should sync by default for members."

    example default
        initial_sync_setting = sync

#
# Policy types for infinite
#

union InfinitePolicy
    initial_root_policy
        "The policy that determines the infinite status of files on first link"
    locked_root_policy
        "An optional policy that locks existing devices root folder to a given policy"

union InfinitePolicySetting
    local
        "The specified content will be synced as local files by default."
    on_demand
        "The specified content will be synced as on-demand files by default."
    default
        "The specified content will take the default setting (policy specific)"


#
# Set an infinite policy setting
#

route set_infinite_policy(SetInfinitePolicyArg, Void, AdministrationError)

    attrs
        auth="team"
        owner="adminx" # TODO: switch to infinite, after finding where we can add infinite to the owner enum

struct SetInfinitePolicyArg
    policy InfinitePolicy
        "The policy which we are setting"

    setting InfinitePolicySetting
        "Whether new shared folders should sync by default for members."

    example default
        policy = initial_root_policy
        setting = on_demand

#
# route change_reseller_support
#

struct ChangeResellerSupportArg
    reseller_support_enabled Boolean
        "Whether to allow access for resellers into Admin Console as Administrator."

    example default
        reseller_support_enabled = false

union_closed ChangeResellerSupportError extends team_administration.AdministrationError
    not_reseller_team
        "This team is not associated to a reseller."

    hipaa_baa_signed
        "Cannot enable reseller support for HIPAA BAA signed teams."

route change_reseller_support(ChangeResellerSupportArg, Void, ChangeResellerSupportError)
    "Determines to allow access for resellers into Admin Console as Administrator.

    Permission : Team member management"

    attrs
        auth="team"
        owner="adminx"

#
# route configure_sso
#

union SsoPolicy
    disabled
        "Users will be able to sign in with their Dropbox credentials."
    optional
        "Users will be able to sign in with either their Dropbox or single sign-on credentials."
    required
        "Users will be required to sign in with their single sign-on credentials."

union SamlNameIdFormat
    email
        "Email."
    persistent
        "Persistent email."
    transient
        "Transient email."


struct ConfigureSsoArg
    sso_policy SsoPolicy
        "SSO policy to set."

    sign_in_url String?
        "Sign in URL. Users will be redirected to this page to sign in. Required when :field:`ConfigureSsoArg.sso_policy` is not :field:`SsoPolicy.disabled`."

    saml_cert String?
        "SAML certificate. Required when :field:`ConfigureSsoArg.sso_policy` is not :field:`SsoPolicy.disabled`."

    nameid_format SamlNameIdFormat?
        "SAML name ID format. Default value for this field is :field:`SamlNameIdFormat.email` (relevant only when :field:`ConfigureSsoArg.sso_policy` is not :field:`SsoPolicy.disabled`)."

    sign_out_url String?
        "Sign out URL. Users will be redirected to this page after they logout of Dropbox. This field is optional."


union_closed ConfigureSsoError extends team_administration.AdministrationError
    missing_sign_in_url
        "Sign in URL is missing."
    invalid_sign_in_url
        "Sign in URL is invalid."
    missing_saml_cert
        "SAML certificate is missing."
    invalid_saml_cert
        "SAML certificate is invalid."
    invalid_sign_out_url
        "Sign out URL is invalid."

route configure_sso(ConfigureSsoArg, Void, ConfigureSsoError)
    "Set SSO policy for the team.

    Permission : Team member management"

    attrs
        auth="team"
        owner="adminx"
