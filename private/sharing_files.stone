namespace sharing

import common
import files
import users

alias FqPathOrNsPath = String(pattern="(\/.*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?", min_length=1)

route add_file_members(AddFileMemberArgs, List(FileMemberActionResult), AddFileMemberError) deprecated by add_file_member
    "Identical to add_file_member. This is used in the desktop client 3.18."

    attrs
        owner = "sharing"

# --

route share_file(ShareFileArg, SharedFileMetadata, ShareFileError)
    "Share a file. This is used when copying the link to a file."

    attrs
        owner = "sharing"

struct ShareFileArg
    "Arguments for :route:`share_file`."

    file PathOrId
        "The file to share."
    actions List(AlphaFileAction)?
        "File actions to query."

    example default
        file = "id:3kmLmQFnf1AAAAAAAAAAAw"
        actions = []

union ShareFileError
    "Error result for :route:`share_file`."
    access_error SharingFileAccessError
    user_error SharingUserError

    example default
        user_error = email_unverified

# --

route share_file/internal(ShareFileInternalArg, ShareFileInternalResult, ShareFileInternalError)
    "Share a file. This is used in the case for temporary path based links."

    attrs
        owner = "sharing"


struct ShareFileInternalArg
    "Arguments for :route:`share_file/internal`."

    file FqPathOrNsPath
        "The path to the file to share ."

    example default
        file = "/dir/file.txt"

union ShareFileInternalResult
    "Result of :route:`share_file/internal`."
    pending_file TempPathBasedFileMetadata
    file AlphaSharedFileMetadata

union ShareFileInternalError
    "Error result for :route:`share_file/internal`."
    access_error SharingFileAccessError
    user_error SharingUserError

    example default
        user_error = email_unverified

struct TempPathBasedFileMetadata
    "Properties of the temporary path based file placeholder."

    policy FolderPolicy
        "Policies governing this shared file."
    owner_team users.Team?
        "The team that owns the file. This field is not present if the file
        is not owned by a team."
    parent_shared_folder_id common.SharedFolderId?
        "The ID of the parent shared folder. This field is present only if the
        file is contained within a shared folder."
    preview_url String
        "URL for displaying a web preview of the shared file."
    path_lower String?
        "The lower-case full path of this file. Absent for unmounted files."
    path_display String?
        "The cased path to be used for display purposes only. In rare instances
        the casing will not correctly match the user's filesystem, but this
        behavior will match the path provided in the Core API v1.
        Absent for unmounted files."
    name String
        "The name of this file."
    time_created common.DropboxTimestamp
        "Timestamp indicating when the current user created this shared file."

    example default
        policy = default
        owner_team = default
        preview_url = "https://www.dropbox.com/scl/fi/fir9vjelf"
        path_lower = "/dir/file.txt"
        path_display = "/dir/file.txt"
        name = "file.txt"
        time_created = "2016-01-20T00:00:00Z"

# --

route get_file_member_counts(GetFileMemberCountsArg, FileMemberCounts, GetFileMemberCountsError)
    "Returns the number of users who have access to the given file. Includes File ACL members
    and inherited members from shared folders."

    attrs
        owner = "sharing"

struct GetFileMemberCountsArg
    "Arguments of :route:`get_file_member_counts`."

    file PathOrId
        "The file of interest."
    limit UInt32(max_value=300) = 100
        "The maximum count to return."
    url String?
        "The shared link URL that the user is viewing the content on when the file is not in their dropbox."

struct FileMemberCounts
    count UInt32
        "Total number of unique users with access to the file."
    exceeds_limit Boolean
        "A boolean indicating if the total file number count is greater than the passed in limit."

    example default
        count = 2
        exceeds_limit = false

union GetFileMemberCountsError
    "Error result for :route:`get_file_member_counts`."

    user_error SharingUserError
    access_error SharingFileAccessError

# --

union AlphaFileAction extends FileAction
    change_options
        "Change file options, such as whether presence and seen state is enabled for the file.
        DEPRECATED: Use enable_viewer_info and disable_viewer_info instead."
    disable_pass
        "Whether the user has permission to disable the presence and seen state information on the
        file. DEPRECATED: Use disable_viewer_info instead."
    enable_pass
        "Whether the user has permission to enable presence and seen state information on the file.
        DEPRECATED: Use enable_viewer-info instead."
    remove_download_policy
        "Whether the user has permission to remove the download policy and allow downloads on the
        file.

        NOTE: This policy is probably subject to removal sometime soon. Talk to davy@ before using
        it."
    set_download_policy
        "Whether the user has permission to set the download policy and disallow downloads on the
        file.

        NOTE: This policy is probably subject to removal sometime soon. Talk to davy@ before using
        it."
struct AlphaFilePermission
    "Whether the user is allowed to take the sharing action on the file."

    action AlphaFileAction
        "The action that the user may wish to take on the file."
    allow Boolean
        "True if the user is allowed to take the action."
    reason PermissionDeniedReason?
        "The reason why the user is denied the permission. Not present if the action
        is allowed."

    example default
        action = edit_contents
        allow = false
        reason = user_not_same_team_as_owner

struct AlphaSharedFileMetadata
    "Properties of the shared file."

    access_type AccessLevel?
        "The current user's access level for this shared file."
    download_policy DownloadPolicy
        "DEPRECATED, use file_policy instead"
    expected_link_metadata ExpectedSharedContentLinkMetadata?
    id FileId
        "The ID of the file."
    link_metadata SharedContentLinkMetadata?
    name String
        "The name of this file."
    owner_team users.Team?
        "The team that owns the file. This field is not present if the file
        is not owned by a team."
    parent_shared_folder_id common.SharedFolderId?
        "The ID of the parent shared folder. This field is present only if the
        file is contained within a shared folder."
    pass_policy PassPolicy
        "DEPRECATED, use file_policy instead"
    path_display String?
        "The cased path to be used for display purposes only. In rare instances
        the casing will not correctly match the user's filesystem, but this
        behavior will match the path provided in the Core API v1.
        Absent for unmounted files."
    path_lower String?
        "The lower-case full path of this file. Absent for unmounted files."
    permissions List(AlphaFilePermission)?
        "The sharing permissions that requesting user has on this file. This
        corresponds to the entries given in :field:`AlphaGetFileMetadataBatchArg.actions`
        or :field:`AlphaGetFileMetadataArg.actions`."
    policy AlphaFolderPolicy
        "Policies of the parent folder governing this shared file."
    preview_url String
        "URL for displaying a web preview of the shared file."
    time_invited common.DropboxTimestamp?
        "Timestamp indicating when the current user was invited to this shared file. If the user was
        not invited to the shared file, the timestamp will indicate when the user was invited to the
        parent shared folder. This value may be absent."

route alpha/get_file_metadata(AlphaGetFileMetadataArg, AlphaSharedFileMetadata, GetFileMetadataError)
    "Similar to get_file_metadata, except for a few additional features.

    This accepts change_options as an incoming permission, for whether the actor can change the
    options of the file.

    This also fetches the appropriate PASS and download settings.

    This also returns the link metadata of the file."

    attrs
        is_preview = true

route alpha/get_file_metadata/batch(AlphaGetFileMetadataBatchArg, List(AlphaGetFileMetadataBatchResult), SharingUserError)
    attrs
        is_preview = true

route update_file_policy(UpdateFilePolicyArg, SharedFileMetadata, UpdateFilePolicyError)
    "Update the policies of a file. This includes both PASS settings and link settings associated with the file."

    attrs
        api_group = "truelink-alpha"
        allow_app_folder_app = true

route alpha/update_file_policy(AlphaUpdateFilePolicyArg, AlphaSharedFileMetadata, UpdateFilePolicyError)
    "Update the policies of a file. This includes both PASS settings and link settings associated with the file."

    attrs
        is_preview = true

route internal_test_only/get_file_shared_content_link(GetFileSharedContentLinkArg, List(String), AddFileMemberError)
    "Get the file shared content link for the given file and member information. Note: This is used ONLY for mobile integration test.

    Note 1: This is used ONLY for mobile integration test.
    Note 2: Because this is for internal test, we did not put more engineering efforts into this endpt to ensure its robustness,
        meaning that we only guarantee that for legal inputs, the generated URL will be equivalent (see Note III) to what is sent through the invitation email;
        for illegal inputs, the behavior of this endpt might be different from the add_folder_member endpt.
    Note 3: Due to the randomness introduced inside our encryption function,
        the r=? parameter in the url generated from this endpt will not be exactly the same
        as in the link in the email. However, we make sure that the decoded recipient information
        will be exactly the same between the two URLs.
    Note 4: The output URLs might not be in the same order as the input members. So if this order matters, you might want to pass in one member every time.
    "

    attrs
        owner = "sharing"

route alpha/list_file_members(AlphaListFileMembersArg, AlphaSharedFileMembers, ListFileMembersError)
    attrs
        is_preview = true

route alpha/list_file_members/continue(AlphaListFileMembersContinueArg, AlphaSharedFileMembers, ListFileMembersContinueError)
    "Once a cursor has been retrieved from :route:`alpha/list_file_members` or
    :route:`list_file_members/batch`, use this to paginate through all shared
    file members."

    attrs
        owner = "sharing"
        is_preview = true

struct AlphaListFileMembersArg extends ListFileMembersArg
    url String?
        "The shared link URL that the user is viewing the content on when the file is not in their dropbox."

struct AlphaListFileMembersContinueArg extends ListFileMembersContinueArg
    url String?
        "The shared link URL that the user is viewing the content on when the file is not in their dropbox."

struct GetFileSharedContentLinkArg
    "Arguments of :route:`internal_test_only/get_file_shared_content_link`"

    file PathOrId
        "File on which the scl url is generated."
    members List(MemberSelector)
        "The target members that will end up in the 'r=' query param of the output urls."
    gen_email_link Boolean
        "Whether we generate a email tracking link (/l/*) or just the scl link /scl/fi/*"

    example default
        file = "id:3kmLmQFnf1AAAAAAAAAAAw"
        members = [default]
        gen_email_link = false

union PassPolicy
    "DEPRECATED: use ViewerInfoPolicy instead."
    enabled
        "Presence and seen state information is available on this file."
    disabled
        "Presence and seen state information is disabled on this file."

union DownloadPolicy
    "This policy is probably subject to removal sometime soon. Talk to davy@ before using it."
    allow
        "Downloads are allowed on this file."
    disallow
        "Downloads are disallowed on this file."

struct AlphaGetFileMetadataArg
    "Arguments of :route:`alpha/get_file_metadata`."

    file PathOrId
        "The file to query."
    url String?
        "The shared link URL that the user is viewing the content on when the file is not in their dropbox."
    actions List(AlphaFileAction)?
        "File actions to query."

    example default
        file = "id:3kmLmQFnf1AAAAAAAAAAAw"
        actions = []

struct AlphaGetFileMetadataBatchArg
    "Arguments of :route:`get_file_metadata/batch`."

    files List(PathOrId, max_items=100)
        "The files to query."
    actions List(AlphaFileAction)?
        "File actions to query."

    example default
        files = ["id:3kmLmQFnf1AAAAAAAAAAAw","id:VvTaJu2VZzAAAAAAAAAADQ"]
        actions = []

struct AlphaGetFileMetadataBatchResult
    "Per file results of :route:`alpha/get_file_metadata/batch`"

    file PathOrId
        "This is the input file identifier corresponding to one of
        :field:`GetFileMetadataBatchArg.files`."
    result AlphaGetFileMetadataIndividualResult
        "The result for this particular file."

union AlphaGetFileMetadataIndividualResult
    metadata AlphaSharedFileMetadata
        "The result for this file if it was successful."
    access_error SharingFileAccessError
        "The result for this file if it was an error."

struct FileSettings
    download_policy DownloadPolicy?
        "The download policy on the file."
    pass_policy PassPolicy?
        "The presence and seen state policy on the file."

struct UpdateFilePolicyArg
    file PathOrId
        "File that we are changing the policy for."
    actions List(FileAction)?
        "A list of `FileAction`s corresponding to `FilePermission`s that should appear in the
         response's :field:`SharedFileMetadata.permissions` field describing the actions the
         authenticated user can perform on the file."
    link_settings LinkSettings?
        "Settings on the link for the file."
    viewer_info_policy ViewerInfoPolicy?
        "The presence and seen state policy on the file."

struct AlphaUpdateFilePolicyArg
    file PathOrId
        "File that we are changing the policy for."
    actions List(AlphaFileAction)?
        "File actions to query."
    file_settings FileSettings?
        "Settings for the file. DEPRECATED: use download_policy and pass_policy instead."
    link_settings AlphaLinkSettings?
        "Settings on the link for the file."
    download_policy DownloadPolicy?
        "The download policy on the file."
    pass_policy PassPolicy?
        "The presence and seen state policy on the file. DEPRECATED: use viewer_info_policy
        instead."
    viewer_info_policy ViewerInfoPolicy?
        "The presence and seen state policy on the file."

union UpdateFilePolicyError
    access_error SharingFileAccessError
    invalid_file_settings
        "The file settings are invalid."
    no_permission
        "The current user does not have permission to perform this action."

struct AlphaSharedFileMembers
    "Shared file user, group, and invitee membership.

    Used for the results of :route:`alpha/list_file_members` and
    :route:`alpha/list_file_members/continue`."

    users List(AlphaUserMembershipInfo)
        "The list of user members of the shared file."
    groups List(GroupMembershipInfo)
        "The list of group members of the shared file."
    invitees List(InviteeMembershipInfo)
        "The list of invited members of a file, but have not logged in and
        claimed this."
    cursor String?
        "Present if there are additional shared file members that have not been returned yet. Pass
        the cursor into :route:`list_file_members/continue` to list additional members."

    example default
        users = [default]
        groups = [default]
        invitees = [default]

struct AlphaUserMembershipInfo extends MembershipInfo
    "The information about a user member of the shared content."

    user UserInfo
        "The account information for the membership user."
    time_last_seen common.DropboxTimestamp?
        "The UTC timestamp of when the user has last seen the content."

    example default
        user = default
        access_type = owner
        permissions = []
