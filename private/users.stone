namespace users

import common

import users_common

#
# Sharing preferences
#

union GetSharingPrefsError
    "Errors that happen when getting sharing preferences."

union SetSharingPrefsError
    "Errors that happen when setting sharing preferences."

struct SharingPrefs
    "Information about a user's sharing preferences.
    Optional fields will always be returned - they are optional for setting only."

    add_message_as_comment_checked Boolean?
        "If the \"Add as message\" checkbox should be checked by default."
    add_message_as_comment_help_shown Boolean?
        "If the help for the \"Add as message\" checkbox should be shown."
    access_reader_no_comment_content_links Boolean?
        "If we should allow the user to add users with a no comment role for
        shared content links."
    access_reader_no_comment_shared_folders Boolean?
        "If we should allow the user to add users with a no comment role for
        shared folders."

route get_sharing_prefs(Void, SharingPrefs, GetSharingPrefsError)
    "Get the sharing preferences for the current user."

route set_sharing_prefs(SharingPrefs, Void, SetSharingPrefsError)
    "Set sharing preferences for the curent user."

route get_root_info(Void, RootInfo, Void)
    "Temporary private route to expose CDM information."

    attrs
        owner = "api-platform"

union RootInfo
    cdm_team CDMInfo
        "The user is on a CDM-enabled team."
        struct
            @common.PathRedactor
            path_root String
                "The ID of the team shared Dropbox."

            @common.PathRedactor
            home_path String
                "The path relative to the team shared Dropbox to the user's
                team member folder."

            home_ns_id String
                "The ID of the user's TMF."
    not_on_cdm_team String
        "The user is not on a CDM-enabled team, but we'll return their home_ns_id."

#
# Route: get_plan_info
#

struct GetPlanInfoArg
    account_id users_common.AccountId
        "A user's account identifier."

    example default
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"

struct PlanInfo
    "The amount of detail revealed about an account depends on the user being queried."
    account_id users_common.AccountId
        "A user's account identifier."
    account_type users_common.AccountType
        "What type of account this user has."
    plan_text String
        "User facing string for plan name."
    plan_detail_text String?
        "User facing string for detailed plan text."
    is_trial Boolean?
        "Is the user on a trial plan."

    example default
        "Basic account."
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = basic
        plan_text = "Dropbox Basic"

    example plus_subscriber
        "A personal account that has a plus subscription."
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = pro
        plan_text = "Dropbox Plus"

    example ios_plus_subscriber
        "A personal account that has a plus subscription on Apple ITunes."
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = pro
        plan_text = "Dropbox Plus"
        plan_detail_text = "Dropbox IOS Plus"

    example ios_plus_trial_subscriber
        "A personal account that has a plus trial subscription on Apple ITunes."
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = pro
        plan_text = "Dropbox Plus"
        plan_detail_text = "Dropbox IOS Plus Trial"
        is_trial = true

    example user_on_business_team
        "A user that's a part of a team."
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = business
        plan_text = "Dropbox Business"

union GetPlanInfoError
    no_account
        "The specified :field:`GetPlanInfoArg.account_id` does not exist."

route get_plan_info(GetPlanInfoArg, PlanInfo, GetPlanInfoError)
    "Get information about a user's plan."

    attrs
        owner = "cash-team"

#
# Scale mitigation endpoint for desktop client
#

struct ScaleMitigationResult
    needs_scale_mitigation Boolean
        "Whether the user needs scale mitigation."
    reason ScaleMitigationReason?
        "Included if scale mitigation is necessary, this is the reason why it is needed."

    example default
        needs_scale_mitigation = false

union ScaleMitigationReason
    too_many_files TooManyFilesReason
        "User needs scale mitigation because they have too many files."

struct TooManyFilesReason
    approximate_file_count Int64
        "The approximate number of files the user has in their Dropbox."
    file_limit Int64
        "The file limit that the user has surpassed."

union ScaleMitigationError
    "Errors that happen when getting if the user needs scale mitigation."

route needs_scale_mitigation(Void, ScaleMitigationResult, ScaleMitigationError)
    "Get information if the user needs scale mitigation for the desktop client to work properly."

    attrs
        owner = "sync-experience"
