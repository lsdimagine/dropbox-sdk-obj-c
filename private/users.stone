namespace users

import common

import users_common

#
# Sharing preferences
#

union GetSharingPrefsError
    "Errors that happen when getting sharing preferences"

union SetSharingPrefsError
    "Errors that happen when setting sharing preferences"

struct SharingPrefs
    "Information about a user's sharing preferences.
    Optional fields will always be returned - they are optional for setting only."

    add_message_as_comment_checked Boolean?
        "If the \"Add as message\" checkbox should be checked by default."
    add_message_as_comment_help_shown Boolean?
        "If the help for the \"Add as message\" checkbox should be shown."
    access_reader_no_comment_content_links Boolean?
        "If we should allow the user to add users with a no comment role for
        shared content links."
    access_reader_no_comment_shared_folders Boolean?
        "If we should allow the user to add users with a no comment role for
        shared folders."

route get_sharing_prefs(Void, SharingPrefs, GetSharingPrefsError)
    "Get the sharing preferences for the current user"

route set_sharing_prefs(SharingPrefs, Void, SetSharingPrefsError)
    "Set sharing preferences for the curent user"

# --

route get_root_info(Void, RootInfo, Void)
    "Temporary private route to expose CDM information."

    attrs
        owner = "api-platform"

union RootInfo
    cdm_team CDMInfo
        "The user is on a CDM-enabled team."
        struct
            path_root String
                "The ID of the team shared Dropbox."
            home_path String
                "The path relative to the team shared Dropbox to the user's
                team member folder."
            home_ns_id String
                "The ID of the user's TMF"
    not_on_cdm_team String
        "The user is not on a CDM-enabled team, but we'll return their home_ns_id"

#
# Paywall endpoints
#

struct GrandfatherModalInfo
    "Informations about the grandfather modal."
    show Boolean
        "Whether the modal should be displayed"

struct SharingPaywallInfo
    "Information about whether certain features are blocked for a user based on
    their plan."

    is_on Boolean?
        "If the user is subjected to this paywall (e.g. in a stormcrow rule)."

    num_shared_folders_owned Int64?
        "How many shared folders the user owns."

    max_owned_shared_folders Int64?
        "The maximum number of shared folders the user is allowed to own as
        defined by the paywall."

    grandfather_modal GrandfatherModalInfo
        "Informations about the grandfather modal."

route get_sharing_paywall_info(Void, SharingPaywallInfo, Void)
    "Get the sharing paywall info for the current user."

struct OwnedSharedFolder
    "Only the bare-bones information necessary for the sharing paywall experiment."

    name String
        "The name of the shared folder the user owns."

    last_active common.DropboxTimestamp
        "The timestamp of when the contents of the shared folder were last changed."

    id Int64
        "The namespace id of the folder."

struct ListOwnedFoldersResult
    "Result for :route:`list_owned_shared_folders`

    Returns a list of the names (paths) of shared folders, owned by the current user."

    entries List(OwnedSharedFolder)
        "List of all shared folders the authenticated user has access to."

route list_owned_shared_folders(Void, ListOwnedFoldersResult, Void)
    "Get the list of shared folders that the current user owns."


#
# Route: get_plan_info
#

struct GetPlanInfoArg
    account_id users_common.AccountId
        "A user's account identifier"

    example default
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"

struct PlanInfo
    "The amount of detail revealed about an account depends on the user being queried."
    account_id users_common.AccountId
        "A user's account identifier"
    account_type users_common.AccountType
        "What type of account this user has"
    plan_text String
        "User facing string for plan name"
    plan_detail_text String?
        "User facing string for detailed plan text"
    is_trial Boolean?
        "Is the user on a trial plan"

    example default
        "Basic account"
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = basic
        plan_text = "Dropbox Basic"

    example plus_subscriber
        "A personal account that has a plus subscription"
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = pro
        plan_text = "Dropbox Plus"

    example ios_plus_subscriber
        "A personal account that has a plus subscription on Apple ITunes"
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = pro
        plan_text = "Dropbox Plus"
        plan_detail_text = "Dropbox IOS Plus"

    example ios_plus_trial_subscriber
        "A personal account that has a plus trial subscription on Apple ITunes"
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = pro
        plan_text = "Dropbox Plus"
        plan_detail_text = "Dropbox IOS Plus Trial"
        is_trial = true

    example user_on_business_team
        "A user that's a part of a team"
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        account_type = business
        plan_text = "Dropbox Business"

union GetPlanInfoError
    no_account
        "The specified :field:`GetPlanInfoArg.account_id` does not exist."

route get_plan_info(GetPlanInfoArg, PlanInfo, GetPlanInfoError)
    "Get information about a user's plan."

    attrs
        owner = "cash-team"
