namespace home

struct FetchIncomingArg
    "The retrieve request args."

    cursor String?
        "Optional. A string representing the cursor. Use this to fetch additional pages."

    count UInt64?
        "Optional. The max number of events to return."

    example default
        cursor = "Returned from previous fetch_incoming calls."
        count = 100

struct FetchIncomingResult
    "The returned object from retrieve."

    entries_json String
        "The events we fetched, as JSON."
    cursor String
        "An opaque serialized cursor. Use this cursor to fetch additional pages."

    example default
        entries_json = "[]"
        cursor = "Returned from previous fetch_incoming calls."

union FetchIncomingError
    unused

route fetch_incoming (FetchIncomingArg, FetchIncomingResult, FetchIncomingError)
    "Fetches the incoming events for the Home feed."

    attrs
        owner="home"
        is_preview=true

# --

struct UpdateIncomingReadStatusArg
    "Argument for marking Incoming entries as read/unread."

    entries List(UpdateIncomingReadStatusArgEntry)
        "List of entry IDs + how the corresponding entries should be updated."

    example default
        entries = [default]

struct UpdateIncomingReadStatusArgEntry
    "Argument for marking an Incoming entry as read/unread."

    entry_id String
        "Encoded ID about a single Incoming entry."

    entry_id_type IncomingEntryIDType
        "Type describing what the entry_id is referring to."

    read_status Boolean
        "Whether the entry should be marked as read (true) or unread (false)."

    example default
        "The paper notification with ID paper-noti-1 should be marked as read"
        entry_id = "paper-noti-1"
        entry_id_type = paper_notification_id
        read_status = true

union IncomingEntryIDType
    "Describes the type of Incoming entry an entry_id is referring to."

    incoming_entry_id
        "The ID identifies an entry as fetched from the fetch_incoming route."
    paper_notification_id
        "The ID identifies a Paper notification."

union UpdateIncomingReadStatusError
    unused

route update_incoming_read_status (UpdateIncomingReadStatusArg, Void, UpdateIncomingReadStatusError)
    "Marks Incoming events as read/unread."

    attrs
        owner="home"
        is_preview=true

# --

struct StarredItemDetails
    "Additional information about a starred item"

    fq_path String
        "The path to the file (empty if not applicable)"

    target_ns_id UInt64
        "The target namespace for the file (zero if not applicable)"

union DisplayType
    "The type of item, used in selecting an icon for display."
    # keep these in sync with the constants in lib/home/constants.py

    file
    folder
    paper_document
    paper_folder
    paper_project
    msdoc
    pdf
    spreadsheet
    shared_folder
    team_folder
    paper_public_folder

union ItemIdType
    encoded_file_obj_id
    fq_path
    paper_document_id_path
    paper_folder_id_path

struct StarredItem
    "A starred item"

    id String
        "id of the item (file/folder/doc) to operate on"

    id_type ItemIdType
        "What kind of identifier has been supplied"

    display_type DisplayType
        "The type of icon to present when displaying the item"

    title String
        "The item's title"

    url String
        "The URL to access the starred item"

    time UInt64
        "The last access time for the item, in ms"

    details StarredItemDetails

union GetStarredStatus
    success
    not_paper_user

struct GetStarredArg
    "Arguments for :route:`get_starred`."

    limit UInt32 = 0
        "The number of starred items to fetch. If zero, sends all of them."

struct GetStarredResponse
    "Response for :route:`get_starred`."

    status GetStarredStatus
        "Status information about the request"

    has_more Boolean
        "If there are more starred items available, above `limit`"

    hide_section Boolean
        "Should an empty starred section be hidden from the user?"

    items List(StarredItem)
        "The starred items"

union GetStarredError
    unused

route get_starred (GetStarredArg, GetStarredResponse, GetStarredError)
    "Fetch starred items (files and paper docs) for the current user"

    attrs
        owner="home"
        is_preview=true

# --

union SectionType
    "Each section of Home."
    # keep these in sync with HOME_SECTION in lib/home/constants.py

    unread
    starred
    recents

struct SetSectionVisibilityArg
    "Arguments for :route:`set_section_visibility`."

    section SectionType
        "The Home section to show/hide."

    visible Boolean
        "If the given section should be visible."

    example default
        section = unread
        visible = false

union SetSectionVisibilityError
    unused

route set_section_visibility (SetSectionVisibilityArg, Void, SetSectionVisibilityError)
    "Sets the visibility of a given home section."

    attrs
        owner="home"
        is_preview=true
